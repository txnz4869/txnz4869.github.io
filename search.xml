<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>日语初级</title>
      <link href="posts/c2b7a51a.html"/>
      <url>posts/c2b7a51a.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、认识五十音图"><a href="#1、认识五十音图" class="headerlink" title="1、认识五十音图"></a>1、认识五十音图</h1><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250921151538489.png" alt="image-20250921151538489"></p><p><code>あ</code>是王羲之行书里的<code>安</code>，<code>ア</code>来自汉字的一部分来自阿的左边<code>阝</code></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250921154042930.png" alt="image-20250921154042930"></p><p>首先从右往左看，它依然沿用着中国古代的书写方式从右往左写，在五十音表中竖着看我们称为<code>行</code>总共十行，横着看我们称为<code>段</code>总共有五段，所以说是五段十行，也就是五十音图。</p><p>五十音图中的空白的地方后续会说。</p><p>平假名主要用于给汉字注音，在明治维新之后日本开始打开国门积极学习西方的先进技术，日本人就翻译了很多西方的词汇和概念，比如社会、化学等。片假名主要用于标注外来语。</p><p><strong>日语的基本结构</strong></p><p>在中文中，中文的语序为<code>主语 + 谓语 + 宾语</code>，而在日语中语序为<code>主语 + 宾语 + 谓语</code></p><p>中文：我吃饭了</p><p>日语：我饭吃了 -&gt; 名词 + 名词 + 动词</p><p>这样就会出现两个名词同时出现，这样在逻辑中就很难知道这两个名字之间的关系，所以在日语中就出现了<code>助词</code></p><p>助词就是为了帮助提醒前面这个词的作用，比如主语 + は（wa）+  宾语 + を(wo)</p><h2 id="1-1-元音（あ行）"><a href="#1-1-元音（あ行）" class="headerlink" title="1.1 元音（あ行）"></a>1.1 元音（あ行）</h2><p>あいうえお，这五个是元音</p><table><thead><tr><th>平假名</th><th>片假名</th><th>罗马字</th></tr></thead><tbody><tr><td>あ</td><td>ア</td><td>a</td></tr><tr><td>い</td><td>イ</td><td>i</td></tr><tr><td>う</td><td>ウ</td><td>u</td></tr><tr><td>え</td><td>エ</td><td>e</td></tr><tr><td>お</td><td>オ</td><td>o</td></tr></tbody></table><h3 id="1-1-1-词例"><a href="#1-1-1-词例" class="headerlink" title="1.1.1 词例"></a>1.1.1 词例</h3><p>1、葵（あおい）⓪　　【名词】 葵花</p><p>2、上（うえ）⓪　【名词】上面</p><p>3、言う（いう）⓪【动词】说</p><p>4、甥（おい）⓪　【名词】侄子，外甥</p><p>5、追う（おう）⓪　　【动词】追</p><p>标记读音的方式：如果是横着写则将读音标注在汉字的上方，如果是竖着写的，读音则标注在汉字的右侧</p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923061453298.png" alt="image-20250923061453298"></p><h2 id="1-2-か行"><a href="#1-2-か行" class="headerlink" title="1.2 か行"></a>1.2 か行</h2><table><thead><tr><th>平假名</th><th>片假名</th><th>罗马字</th></tr></thead><tbody><tr><td>か</td><td>カ</td><td>ka</td></tr><tr><td>き</td><td>キ</td><td>ki</td></tr><tr><td>く</td><td>ク</td><td>ku</td></tr><tr><td>け</td><td>ケ</td><td>ke</td></tr><tr><td>こ</td><td>コ</td><td>ko</td></tr></tbody></table><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923062026893.png" alt="image-20250923062026893"></p><p>大多数情况下以い结尾的都是形容词。</p><h2 id="1-3-さ行"><a href="#1-3-さ行" class="headerlink" title="1.3 さ行"></a>1.3 さ行</h2><table><thead><tr><th>平假名</th><th>片假名</th><th>罗马字</th></tr></thead><tbody><tr><td>さ</td><td>サ</td><td>sa</td></tr><tr><td>し</td><td>シ</td><td>shi/si，推荐使用shi</td></tr><tr><td>す</td><td>ス</td><td>su</td></tr><tr><td>せ</td><td>セ</td><td>se</td></tr><tr><td>そ</td><td>ソ</td><td>so</td></tr></tbody></table><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923062318272.png" alt="image-20250923062318272"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923062414272.png" alt="image-20250923062414272"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923062452896.png" alt="image-20250923062452896"></p><h2 id="1-4-な行"><a href="#1-4-な行" class="headerlink" title="1.4 な行"></a>1.4 な行</h2><h3 id="1-4-1-写法"><a href="#1-4-1-写法" class="headerlink" title="1.4.1 写法"></a>1.4.1 写法</h3><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923063000947.png" alt="image-20250923063000947"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923063134152.png" alt="image-20250923063134152"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923063151831.png" alt="image-20250923063151831"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923063221755.png" alt="image-20250923063221755"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923063240137.png" alt="image-20250923063240137"></p><h3 id="1-4-2-平假名-片假名-罗马字"><a href="#1-4-2-平假名-片假名-罗马字" class="headerlink" title="1.4.2 平假名/片假名/罗马字"></a>1.4.2 平假名/片假名/罗马字</h3><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923063702225.png" alt="image-20250923063702225"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923063826843.png" alt="image-20250923063826843"></p><h2 id="1-5-た行"><a href="#1-5-た行" class="headerlink" title="1.5 た行"></a>1.5 た行</h2><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923063311903.png" alt="image-20250923063311903"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923063327938.png" alt="image-20250923063327938"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923063418475.png" alt="image-20250923063418475"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923063511621.png" alt="image-20250923063511621"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250923063525305.png" alt="image-20250923063525305"></p><h2 id="1-6-は行"><a href="#1-6-は行" class="headerlink" title="1.6 は行"></a>1.6 は行</h2><h3 id="1-6-1-写法"><a href="#1-6-1-写法" class="headerlink" title="1.6.1 写法"></a>1.6.1 写法</h3><p><img src="/medias/loading.gif" data-original="/%E6%A2%81%E7%88%BD%E6%97%A5%E8%AF%AD.assets/image-20251001154853178.png" alt="image-20251001154853178"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001154948603.png" alt="image-20251001154948603"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001155002258.png" alt="image-20251001155002258"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001155011728.png" alt="image-20251001155011728"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001155048098.png" alt="image-20251001155048098"></p><h3 id="1-6-2-词例"><a href="#1-6-2-词例" class="headerlink" title="1.6.2 词例"></a>1.6.2 词例</h3><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001165746389.png" alt="image-20251001165746389"></p><h2 id="1-7-ま行"><a href="#1-7-ま行" class="headerlink" title="1.7 ま行"></a>1.7 ま行</h2><h3 id="1-7-1-写法"><a href="#1-7-1-写法" class="headerlink" title="1.7.1 写法"></a>1.7.1 写法</h3><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001155200149.png" alt="image-20251001155200149"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001155215522.png" alt="image-20251001155215522"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001155426981.png" alt="image-20251001155426981"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001155509418.png" alt="image-20251001155509418"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001155557305.png" alt="image-20251001155557305"></p><h3 id="1-7-2-词例"><a href="#1-7-2-词例" class="headerlink" title="1.7.2 词例"></a>1.7.2 词例</h3><p>お名前わ？</p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001170105863.png" alt="image-20251001170105863"></p><h2 id="1-8-や行"><a href="#1-8-や行" class="headerlink" title="1.8 や行"></a>1.8 や行</h2><h3 id="1-8-1-写法"><a href="#1-8-1-写法" class="headerlink" title="1.8.1 写法"></a>1.8.1 写法</h3><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001155623397.png" alt="image-20251001155623397"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001155732877.png" alt="image-20251001155732877"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001155802398.png" alt="image-20251001155802398"></p><h3 id="1-8-2-词例"><a href="#1-8-2-词例" class="headerlink" title="1.8.2 词例"></a>1.8.2 词例</h3><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001170353197.png" alt="image-20251001170353197"></p><h2 id="1-9-ら行"><a href="#1-9-ら行" class="headerlink" title="1.9 ら行"></a>1.9 ら行</h2><h3 id="1-9-1-写法"><a href="#1-9-1-写法" class="headerlink" title="1.9.1 写法"></a>1.9.1 写法</h3><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001155858314.png" alt="image-20251001155858314"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001155930166.png" alt="image-20251001155930166"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001160019062.png" alt="image-20251001160019062"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001160050827.png" alt="image-20251001160050827"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001160105182.png" alt="image-20251001160105182"></p><h3 id="1-9-2-词例"><a href="#1-9-2-词例" class="headerlink" title="1.9.2 词例"></a>1.9.2 词例</h3><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001172108341.png" alt="image-20251001172108341"></p><h2 id="1-10-わ行"><a href="#1-10-わ行" class="headerlink" title="1.10 わ行"></a>1.10 わ行</h2><h3 id="1-10-1-写法"><a href="#1-10-1-写法" class="headerlink" title="1.10.1 写法"></a>1.10.1 写法</h3><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001160232411.png" alt="image-20251001160232411"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001160306111.png" alt="描述"><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001160314303.png" alt="描述"></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001160401050.png" alt="image-20251001160401050"></p><h3 id="1-10-2-词例"><a href="#1-10-2-词例" class="headerlink" title="1.10.2 词例"></a>1.10.2 词例</h3><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001172341927.png" alt="image-20251001172341927"></p><h2 id="1-11-外来语单词"><a href="#1-11-外来语单词" class="headerlink" title="1.11 外来语单词"></a>1.11 外来语单词</h2><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001172655904.png" alt="image-20251001172655904"></p><h1 id="2、日语的读音"><a href="#2、日语的读音" class="headerlink" title="2、日语的读音"></a>2、日语的读音</h1><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250921165029192.png" alt="image-20250921165029192"></p><p>0型音：就是第一个假名正常读，第二个音就要往上读，剩下的假名的读法和第二个音一样</p><audio controls=""><source src="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/0%E5%9E%8B%E9%9F%B3.m4a" type="audio/mpeg"></audio><p>4型音：从第4个假名开始往下降，前面都是和0型音一样</p><audio controls=""><source src="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/4%E5%9E%8B%E9%9F%B3.m4a" type="audio/mpeg"></audio><p>5型音：</p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250921205548364.png" alt="image-20250921205548364"></p><audio controls=""><source src="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/5%E5%9E%8B%E9%9F%B3.m4a" type="audio/mpeg"></audio><p>3型音：从第3个假名开始往下降，前面都是和0型音一样</p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250921205745035.png" alt="image-20250921205745035"></p><audio controls=""><source src="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/3%E5%9E%8B%E9%9F%B3.m4a" type="audio/mpeg"></audio><p>2型音：从第2个假名开始往下降，前面都是和0型音一样</p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250921210001646.png" alt="image-20250921210001646"></p><audio controls=""><source src="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/2%E5%9E%8B%E9%9F%B3.m4a" type="audio/mpeg"></audio><p>1型音：从第1个假名开始往下降，<strong>然后把第一个音升上去</strong></p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20250921210813753.png" alt="image-20250921210813753"></p><audio controls=""><source src="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/%E5%BD%95%E9%9F%B3%20(4).m4a" type="audio/mpeg"></audio># 3、日语读音规则<h2 id="3-1-拨音（ん）"><a href="#3-1-拨音（ん）" class="headerlink" title="3.1 拨音（ん）"></a>3.1 拨音（ん）</h2><p>日语音节末出现「ん」称为拨音。与汉语鼻音相类似。它的发音根据后面的音节有所变化。发音时占一个音拍。拨音（ん）会根据它后面所接的假名的不同，发不同的音：</p><ul><li>在た行、だ行、ら行、な行音节前面发/n/音；あん　ぃん…</li><li>在ば行、ぱ行、ま行音节前面发/m/；</li><li>在か行、が行及其他音节前面发/ng/ 。</li></ul><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251001174652253.png" alt="image-20251001174652253"></p><audio controls=""><source src="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/102%23198949778%23f002.mp3" type="audio/mpeg"></audio><audio controls=""><source src="https://oss.mojidict.com/tts_v2/102%23198940881%23f002.mp3?vTag=1686613197448" type="audio/mpeg"></audio><audio controls=""><source src="https://oss.mojidict.com/tts_v2/102%23198933270%23f002.mp3?vTag=1736753416186" type="audio/mpeg"></audio><audio controls=""><source src="https://oss.mojidict.com/tts_v2/102%23198983079%23f002.mp3?vTag=1686560307479" type="audio/mpeg"></audio><p>あん（an）</p><p>いん（in）</p><p>うん (uh 听来有点像uen)</p><p>えん(eh注意e的读音后面有一个en的音)</p><p>おん(oh 读音类似ong，是一个连贯的读音)</p><p>かん(读音痛起来类似kan)</p><p>きん（kin）</p><p>くん（kun）</p><p>けん（类似英文的can）</p><p>こん（kong）</p><p><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251002222245845.png" alt="image-20251002222245845"></p><h2 id="3-2-常用寒暄语"><a href="#3-2-常用寒暄语" class="headerlink" title="3.2 常用寒暄语"></a>3.2 常用寒暄语</h2><ul><li><p>初（はじ）めまして。 ④　初次见面<br><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251003011034692.png" alt="image-20251003011034692"></p></li><li><p>よろしくお願いします。 ⓪＋⑥　请多关照<br><img src="/medias/loading.gif" data-original="https://tonyxue.oss-cn-shanghai.aliyuncs.com/note_img/image-20251003011314267.png" alt="image-20251003011314267"></p></li><li><p>こちらこそよろしくお願いします。　④</p></li><li><p>お久しぶりです。　⑦ 好久不见　<br>ふ(fu)　ぶ(bu)</p></li><li><p>また明日（あした）。：明天见　またね、また今度ね（またこんどね）</p></li><li><p>お疲れ様でした。　⑦ 您辛苦了（只用于平辈或者对下属使用）</p><p>回复的时候也可以直接使用这句话</p></li></ul><h2 id="3-3-浊音、半浊音的读音"><a href="#3-3-浊音、半浊音的读音" class="headerlink" title="3.3 浊音、半浊音的读音"></a>3.3 浊音、半浊音的读音</h2>]]></content>
      
      
      <categories>
          
          <category> 日语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 五十音 </tag>
            
            <tag> 读法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3分钟，手摸手教你用OpenResty搭建高性能隧道代理（附完整配置！）</title>
      <link href="posts/c2b7a51a.html"/>
      <url>posts/c2b7a51a.html</url>
      
        <content type="html"><![CDATA[<p>经常写爬虫的小伙伴们对代理 IP 应该不会很陌生了吧？</p><p>通常，我们为了让爬虫更加稳定，一般我们都会去购买一些代理 IP 用在我们的爬虫服务上。常规的做法，我们一般会去某个代理网站上面购买服务，然后我们会得到一个获取代理 IP 的请求地址，之后我们再写一个请求去获取这些代理 IP。</p><p>一般来说，这些代理 IP 的有效期都不会太长，当然和你购买的套餐有一定的关系，常规来说，一般每个代理 IP 的有效期就只有 1-5分钟。我们还需要在爬虫应用程序中去维护这些代理 IP，可能我们的代码就会这样去写</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/tls"</span><span class="token string">"io"</span><span class="token string">"net/http"</span><span class="token string">"net/url"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 通过请求代理IP服务获得一些可用的代理 IP</span>   <span class="token comment">// ips := []string{"192.168.0.1:8080", "192.168.0.1:8081", "192.168.0.1:8082"}</span>   ips <span class="token operator">:=</span> <span class="token function">fetchProxyIPs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   proxyIP <span class="token operator">:=</span> ips<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>proxyUrl<span class="token punctuation">,</span> err <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"http://"</span><span class="token operator">+</span>proxyIP<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>tr <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Transport<span class="token punctuation">{</span>Proxy<span class="token punctuation">:</span>           http<span class="token punctuation">.</span><span class="token function">ProxyURL</span><span class="token punctuation">(</span>proxyUrl<span class="token punctuation">)</span><span class="token punctuation">,</span>TLSClientConfig<span class="token punctuation">:</span> <span class="token operator">&amp;</span>tls<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>InsecureSkipVerify<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span>Transport<span class="token punctuation">:</span> tr<span class="token punctuation">,</span>Timeout<span class="token punctuation">:</span>   <span class="token number">15</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span><span class="token punctuation">}</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"https://httpbin.org/ip"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> resp<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"Failed to get a valid response"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>content<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Response:"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们的爬虫程序只有一个，那么上面的代码完全没有啥问题。但是，如果我们的爬虫程序不止一个呢？是不是 <code>fetchProxyIPs()</code> 的代码逻辑就得复制粘贴多次？ 如果哪天我想更换代理服务商岂不是还得一个一个的去改代码？</p><p>那么，有没有一种方式，可以在我设置代理 IP 的时候，就设置一个固定的 IP，然后这个固定的 IP 再帮我“自动”去使用代理 IP 呢？</p><p>是的，<strong>隧道代理</strong>就是干这事儿的。</p><blockquote><p>在软件开发中，没有什么是不能通过加一层中间件来解决问题的，如果有，那么就再加一层……</p></blockquote><p>可能，我们最终需要写的代码，就类似这样：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/tls"</span><span class="token string">"io"</span><span class="token string">"net/http"</span><span class="token string">"net/url"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 只需要配置隧道代理地址，无需管理代理池</span>proxyUrl<span class="token punctuation">,</span> err <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:9527"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>tr <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Transport<span class="token punctuation">{</span>Proxy<span class="token punctuation">:</span>           http<span class="token punctuation">.</span><span class="token function">ProxyURL</span><span class="token punctuation">(</span>proxyUrl<span class="token punctuation">)</span><span class="token punctuation">,</span>TLSClientConfig<span class="token punctuation">:</span> <span class="token operator">&amp;</span>tls<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>InsecureSkipVerify<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span>Transport<span class="token punctuation">:</span> tr<span class="token punctuation">,</span>Timeout<span class="token punctuation">:</span>   <span class="token number">15</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span><span class="token punctuation">}</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"https://httpbin.org/ip"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> resp<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"Failed to get a valid response"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>content<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Response:"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>http://127.0.0.1:9527</code> 服务就是我们设定的隧道代理，当我们通过 <code>http://127.0.0.1:9527</code> 去设置代理时，<code>http://127.0.0.1:9527</code> 会自动帮我们切换代理 IP。</p><p>现在有很多代理 IP 服务商都有提供隧道代理服务的，但是，价格一般都不会太便宜。感兴趣的小伙伴们可以去了解了解。</p><p>其实，自己动手搭建一个隧道代理服务也不会太复杂，用 go 写一个代理转发程序也是可以的，但是，在这个应用场景下，还有更好的选择：<strong>OpenResty</strong>。</p><p>OpenResty 其实是 Nginx + Lua JIT。Nginx 本身就擅长处理 TCP 连接，性能高，稳定成熟。</p><p>有小伙伴这时候就说了，不太会 Lua 脚本怎么办？</p><p>没关系，这里我将整个配置都贴出来，以供各位参考：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">worker_processes</span>  <span class="token number">16</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">error_log</span>  /usr/local/openresty/nginx/logs/error.log debug</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token directive"><span class="token keyword">stream</span></span> <span class="token punctuation">{</span>    <span class="token comment"># 自定义 TCP 日志格式定义</span>    <span class="token comment"># 包含连接的 IP、时间、协议、状态、流量、会话时长、上游地址及流量等</span>    <span class="token directive"><span class="token keyword">log_format</span> tcp_proxy <span class="token string">'<span class="token variable">$remote_addr</span> [<span class="token variable">$time_local]</span> '</span>                         <span class="token string">'<span class="token variable">$protocol</span> <span class="token variable">$status</span> <span class="token variable">$bytes_sent</span> <span class="token variable">$bytes_received</span> '</span>                         <span class="token string">'<span class="token variable">$session_time</span> "<span class="token variable">$upstream_addr</span>" '</span>                         <span class="token string">'"<span class="token variable">$upstream_bytes_sent</span>" "<span class="token variable">$upstream_bytes_received</span>" "<span class="token variable">$upstream_connect_time</span>"'</span></span><span class="token punctuation">;</span>    <span class="token comment"># 启用日志记录到指定文件，并使用自定义格式</span>    <span class="token directive"><span class="token keyword">access_log</span> /usr/local/openresty/nginx/logs/tcp-access.log tcp_proxy</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">open_log_file_cache</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>    <span class="token comment"># TCP 代理配置</span>    <span class="token comment"># upstream 块中定义一个占位 server</span>    <span class="token comment"># 注意：0.0.0.0:1101 实际不会使用，真正地址会被 balancer_by_lua_block 动态覆盖</span>    <span class="token directive"><span class="token keyword">upstream</span> real_server</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">server</span> 0.0.0.0:1101</span><span class="token punctuation">;</span>        <span class="token comment"># 使用 balancer_by_lua_block 动态设置后端目标主机和端口</span>        <span class="token directive"><span class="token keyword">balancer_by_lua_block</span></span> <span class="token punctuation">{</span>            -- 检查 preread 阶段是否已经设置了 proxy_host 和 proxy_port            -- 从 ngx.ctx 中获取代理服务器地址            if not ngx.ctx.proxy_host or not ngx.ctx.proxy_port then                ngx.log(ngx.ERR, "====&gt;proxy_host or proxy_port is not set in ngx.ctx&lt;====")                return            end            -- 初始化 balancer            local balancer = require "ngx.balancer"            local host = ""            local port = 0            -- 从上下文中提取目标 IP 和端口            host = ngx.ctx.proxy_host            port = ngx.ctx.proxy_port            -- 设置代理服务器地址            local ok, err = balancer.set_current_peer(host, port)            if not ok then                ngx.log(ngx.ERR, "====&gt;failed to set current peer: " .. tostring(err) .. "&lt;====")                return            end        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment"># 定义 TCP server 模块（stream）监听端口和代理逻辑</span>    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token comment"># preread_by_lua_block 在客户端连接建立时就会触发，用于预处理逻辑</span>        <span class="token directive"><span class="token keyword">preread_by_lua_block</span></span> <span class="token punctuation">{</span>            -- https://github.com/openresty/lua-resty-redis            local redis = require "resty.redis"            local redis_instance = redis:new()            -- 设置 Redis 操作超时时间（毫秒）            redis_instance:set_timeout(5000)            -- 一些 redis 连接配置            local rdb_host = "192.168.1.208"            local rdb_port = 6379            local rdb_pwd = ""            local rdb_db = 1            -- 存放代理服务器地址的 zset 表名称            local zset_table_name = "tunnel_proxy_pool"            -- 连接到 Redis            local ok, err = redis_instance:connect(rdb_host, rdb_port)            if not ok then                ngx.log(ngx.ERR, "====&gt;failed to connect to Redis: [" .. tostring(ok) .. "] err msg ==&gt; " .. tostring(err) .. "&lt;====")                return            end            -- 选择数据库            local ok, err = redis_instance:select(rdb_db)            if not ok then                ngx.log(ngx.ERR, "====&gt;failed to select Redis DB: [" .. tostring(ok) .. "] err msg ==&gt; " .. tostring(err) .. "&lt;====")                return            end            -- 如果设置了密码，则进行认证            if rdb_pwd and rdb_pwd ~= "" then                local ok, err = redis_instance:auth(rdb_pwd)                if not ok then                    ngx.log(ngx.ERR, "====&gt;failed to auth Redis: [" .. tostring(ok) .. "] err msg ==&gt; " .. tostring(err) .. "&lt;====")                    return                end            end            -- 先检查 zset 表是否存在或者是否有数据            local hosts_count, err = redis_instance:zcard(zset_table_name)            if not hosts_count or hosts_count &lt;= 0 then                ngx.log(ngx.ERR, "====&gt;no available proxy servers in Redis zset table: " .. tostring(zset_table_name) .. " ==&gt; " .. tostring(err) .. "&lt;====")                return            end            -- 获取分数最低的前 1 个代理服务器地址            local res, err = redis_instance:zrange(zset_table_name, 0, 0, "WITHSCORES")            if not res or <span class="token comment">#res == 0 then</span>                ngx.log(ngx.ERR, "====&gt;failed to get proxy server from Redis zset table: " .. tostring(zset_table_name) .. "&lt;====")                return            end            -- 解析结果（假设之前存入 zset 的元素类似 127.0.0.1:8080、127.0.0.1:8181 分数为使用次数）            local proxy_ip, proxy_port = res[1]:match("([^:]+):(%d+)")            if not proxy_ip or not proxy_port then                ngx.log(ngx.ERR, "====&gt;failed to parse proxy server address ==&gt; " .. tostring(res[1]) .. "&lt;====")                return            end            -- 获取了当前代理服务器地址后，给其分数加 1，表示当前已经使用过一次            local ok, err = redis_instance:zincrby(zset_table_name, 1, res[1])            if not ok then                ngx.log(ngx.ERR, "====&gt;failed to increment proxy server score in Redis zset table: " .. tostring(zset_table_name) .. " ==&gt; " .. tostring(err) .. "&lt;====")                return            end            -- 将获取到的代理服务器地址存入 ngx.ctx 中，供 balancer_by_lua_block 使用            ngx.ctx.proxy_host = proxy_ip            ngx.ctx.proxy_port = tonumber(proxy_port)            ngx.log(ngx.INFO, "====&gt;using proxy server ==&gt; " .. tostring(proxy_ip) .. ":" .. tostring(proxy_port) .. "&lt;====")            -- 释放 Redis 连接，否则连接池将保留不完整的连接状态            ok, err = redis_instance:set_keepalive(10000, 100)            if not ok then                ngx.log(ngx.ERR, "====&gt;failed to set Redis keepalive: " .. tostring(err) .. "&lt;====")            end        <span class="token punctuation">}</span>        <span class="token comment"># 对外暴露的监听端口</span>        <span class="token directive"><span class="token keyword">listen</span> 0.0.0.0:9527</span><span class="token punctuation">;</span>        <span class="token comment"># 设置代理的目标 upstream 名称</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> real_server</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_connect_timeout</span> <span class="token number">5s</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_timeout</span> <span class="token number">15s</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上，其实我们就是借用 OpenResty 做了一层代理转发，你可以结合流程图来看看</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-2713e0b65ed0a415.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流程图"></p><p>那么，如何部署 OpenResty 呢？</p><p>可以直接使用下面的 <code>docker-compose.yaml</code> 文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">openresty</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> openresty_server    <span class="token key atrule">image</span><span class="token punctuation">:</span> openresty/openresty<span class="token punctuation">:</span>1.25.3.2<span class="token punctuation">-</span>5<span class="token punctuation">-</span>centos7    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9527:9527"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./conf/tunnel_proxy_redis.conf<span class="token punctuation">:</span>/usr/local/openresty/nginx/conf/nginx.conf<span class="token punctuation">:</span>ro      <span class="token punctuation">-</span> ./logs<span class="token punctuation">:</span>/usr/local/openresty/nginx/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件写好之后，直接在和 <code>docker-compose.yaml</code> 文件同级目录下执行 <code>docker-compose up</code> 即可启动 OpenResty 服务。</p><p>另外，还忘记说了一点：你需要自己写一个脚本，定时将可用的代理 IP 同步到 redis 中，上面的 Lua 脚本只是会从 redis 中取出可用的代理 IP 进行转发。</p><p>自动脚本干的活儿类似写入这样的数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zadd tunnel_proxy_pool <span class="token number">0</span> <span class="token number">127.0</span>.0.1:9001 <span class="token number">0</span> <span class="token number">4127.0</span>.0.1:9002 <span class="token number">0</span> <span class="token number">127.0</span>.0.1:9003<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大家感兴趣的，可以通过访问 <code>https://github.com/pudongping/tunnel-proxy</code> 获得源码。</p>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenResty </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
